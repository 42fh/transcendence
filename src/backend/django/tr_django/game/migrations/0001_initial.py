# Generated by Django 5.1.2 on 2024-11-01 07:59

import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GameMode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("display_name", models.CharField(max_length=50, unique=True)),
                ("wins", models.PositiveIntegerField(default=0)),
                ("losses", models.PositiveIntegerField(default=0)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DirectEliminationTournamentGame",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("date", models.DateTimeField()),
                ("duration", models.IntegerField(blank=True, null=True)),
                (
                    "source_game1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="next_game1",
                        to="game.directeliminationtournamentgame",
                    ),
                ),
                (
                    "source_game2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="next_game2",
                        to="game.directeliminationtournamentgame",
                    ),
                ),
                (
                    "mode",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game.gamemode",
                    ),
                ),
                (
                    "winner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="won_tournament_games",
                        to="game.player",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PlayerGameStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("score", models.IntegerField(default=0)),
                ("rank", models.PositiveIntegerField(default=0)),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="game.player"
                    ),
                ),
                (
                    "tournament_game",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game.directeliminationtournamentgame",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="directeliminationtournamentgame",
            name="players",
            field=models.ManyToManyField(
                related_name="direct_elimination_games",
                through="game.PlayerGameStats",
                to="game.player",
            ),
        ),
        migrations.CreateModel(
            name="Ranking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("points", models.IntegerField(default=0)),
                ("rank_position", models.IntegerField(blank=True, null=True)),
                (
                    "player",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ranking",
                        to="game.player",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SingleGame",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date", models.DateTimeField()),
                ("duration", models.IntegerField(blank=True, null=True)),
                (
                    "mode",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game.gamemode",
                    ),
                ),
                (
                    "players",
                    models.ManyToManyField(
                        related_name="single_games",
                        through="game.PlayerGameStats",
                        to="game.player",
                    ),
                ),
                (
                    "winner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="won_single_games",
                        to="game.player",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="playergamestats",
            name="single_game",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="game.singlegame",
            ),
        ),
        migrations.CreateModel(
            name="Tournament",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                ("start_registration", models.DateTimeField()),
                ("end_registration", models.DateTimeField()),
                ("start_date", models.DateTimeField()),
                (
                    "auto_start_warning_time",
                    models.DurationField(
                        blank=True,
                        help_text="Time delay after min participants reached",
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("round_robin", "Round Robin"),
                            ("knockout", "Knockout"),
                            ("double_elimination", "Double Elimination"),
                            ("single_elimination", "Single Elimination"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_public", models.BooleanField(default=True)),
                ("min_participants", models.PositiveIntegerField(default=2)),
                (
                    "max_participants",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "ranking",
                    models.JSONField(
                        blank=True,
                        help_text="Stores ranking details, e.g., [{'player_id': 1, 'rank': 1, 'points': 100}]",
                        null=True,
                    ),
                ),
                (
                    "prize_type",
                    models.CharField(
                        choices=[
                            ("no_prize", "No Prize"),
                            ("crypto_coin", "Crypto Coin"),
                            ("real_money", "Real Money"),
                            ("in_game_points", "In Game Points"),
                            ("fun_item", "Fun Item"),
                        ],
                        max_length=20,
                    ),
                ),
                ("prize_details", models.TextField(blank=True, null=True)),
                ("has_entry_fee", models.BooleanField(default=False)),
                (
                    "entry_fee",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "prize_pot",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "allowed_players",
                    models.ManyToManyField(
                        blank=True,
                        related_name="allowed_in_tournaments",
                        to="game.player",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_tournaments",
                        to="game.player",
                    ),
                ),
                (
                    "match_schedule",
                    models.ManyToManyField(
                        related_name="tournaments",
                        to="game.directeliminationtournamentgame",
                    ),
                ),
                (
                    "participants",
                    models.ManyToManyField(
                        blank=True,
                        related_name="tournaments_participated",
                        to="game.player",
                    ),
                ),
                (
                    "waiting_list",
                    models.ManyToManyField(
                        blank=True,
                        related_name="tournaments_waiting_list",
                        to="game.player",
                    ),
                ),
            ],
        ),
    ]
