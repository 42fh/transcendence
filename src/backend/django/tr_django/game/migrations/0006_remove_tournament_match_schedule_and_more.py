# Generated by Django 5.1.2 on 2024-11-01 22:44

import datetime
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("game", "0005_alter_playergamestats_score"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="tournament",
            name="match_schedule",
        ),
        migrations.RemoveField(
            model_name="tournament",
            name="auto_start_warning_time",
        ),
        migrations.RemoveField(
            model_name="tournament",
            name="entry_fee",
        ),
        migrations.RemoveField(
            model_name="tournament",
            name="has_entry_fee",
        ),
        migrations.RemoveField(
            model_name="tournament",
            name="prize_details",
        ),
        migrations.RemoveField(
            model_name="tournament",
            name="prize_pot",
        ),
        migrations.RemoveField(
            model_name="tournament",
            name="prize_type",
        ),
        migrations.RemoveField(
            model_name="tournament",
            name="ranking",
        ),
        migrations.AddField(
            model_name="tournament",
            name="auto_start_delay",
            field=models.DurationField(
                default=datetime.timedelta(seconds=300),
                help_text="How long to wait after minimum participants reached before starting",
            ),
        ),
        migrations.AddField(
            model_name="tournament",
            name="start_mode",
            field=models.CharField(
                choices=[("fixed", "Fixed Start Time"), ("auto", "Start When Ready")],
                default="fixed",
                help_text="Whether to start at fixed time or when minimum participants is reached",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="tournament",
            name="start_date",
            field=models.DateTimeField(
                blank=True, help_text="Required for fixed start mode", null=True
            ),
        ),
        migrations.CreateModel(
            name="PrizeConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("prize_type", models.CharField(max_length=20)),
                ("prize_details", models.TextField(blank=True, null=True)),
                ("has_entry_fee", models.BooleanField(default=False)),
                (
                    "entry_fee",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "prize_pot",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "tournament",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game.tournament",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TournamentGame",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("ready", "Ready"),
                            ("active", "Active"),
                            ("finished", "Finished"),
                        ],
                        default="draft",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, null=True)),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("finished_at", models.DateTimeField(blank=True, null=True)),
                (
                    "game_type",
                    models.CharField(
                        choices=[
                            ("direct_elimination", "Direct Elimination"),
                            ("round_robin", "Round Robin"),
                            ("swiss", "Swiss System"),
                        ],
                        max_length=20,
                    ),
                ),
                ("group_number", models.PositiveIntegerField(blank=True, null=True)),
                ("swiss_round", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "mode",
                    models.ForeignKey(
                        help_text="Defines game rules and player requirements",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game.gamemode",
                    ),
                ),
                (
                    "players",
                    models.ManyToManyField(
                        related_name="%(class)s_games",
                        through="game.PlayerGameStats",
                        to="game.player",
                    ),
                ),
                (
                    "source_game1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="next_game1",
                        to="game.tournamentgame",
                    ),
                ),
                (
                    "source_game2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="next_game2",
                        to="game.tournamentgame",
                    ),
                ),
                (
                    "winner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="won_%(class)s_games",
                        to="game.player",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="playergamestats",
            name="tournament_game",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="game.tournamentgame",
            ),
        ),
        migrations.CreateModel(
            name="TournamentGameSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("round_number", models.PositiveIntegerField()),
                ("match_number", models.PositiveIntegerField()),
                ("scheduled_time", models.DateTimeField(blank=True, null=True)),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game.tournamentgame",
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game.tournament",
                    ),
                ),
            ],
            options={
                "ordering": ["round_number", "match_number"],
            },
        ),
        migrations.AddField(
            model_name="tournament",
            name="games",
            field=models.ManyToManyField(
                related_name="tournaments",
                through="game.TournamentGameSchedule",
                to="game.tournamentgame",
            ),
        ),
        migrations.CreateModel(
            name="TournamentRanking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rank", models.PositiveIntegerField()),
                ("points", models.IntegerField()),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="game.player"
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game.tournament",
                    ),
                ),
            ],
            options={
                "ordering": ["rank"],
                "unique_together": {("tournament", "player")},
            },
        ),
        migrations.DeleteModel(
            name="DirectEliminationTournamentGame",
        ),
    ]
