services:
  redis:
    image: "redis:7"
    ports:
      - "6380:6380"
    networks:
      - transcendence_network
  postgres:
    image: "postgres:16"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    volumes:
      - ${POSTGRES_DATA}:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - transcendence_network
  django:
    build: ./src/backend/django
    # mind that manage.py is in the tr_django folder
    command: sh -c "python tr_django/manage.py migrate && python tr_django/manage.py collectstatic --noinput && daphne -b 0.0.0.0 -p 8000 tr_django.asgi:application"
    env_file:
      - ./.env
    volumes:
      # Probably we don't want to have a volume for the django app in production but just copy the files
      - ./src/backend/django:/app
      - ./media:/app/media
    ports:
      - "8000"
    depends_on:
      - redis
      - postgres
    environment:
      - REDIS_URL=${REDIS_URL}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      # postgres is the value of the service name in the docker compose file
      # it means it will work only if postgres service is up and running
      # and it will not work with a postgres running on the host machine
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    networks:
      - transcendence_network
  nginx:
    build:
      # we need the context to be ./src instad of ./src/nginx to so that it can see easily the frontend folder
      context: ./src/
      dockerfile: nginx/Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT} # Pass the environment as a build argument
    volumes:
      - ./src/frontend/:/usr/share/nginx/html
      - ./src/nginx/logs:/var/log/nginx
      - ./media:/var/www/media
      - ./t.000031.xyz:/etc/letsencrypt/live/t.000031.xyz:ro
    ports:
      # TODO: Overriding the port manually.
      # The override file doesn't work.
      # nginx is the https termination point
      - "443:80"
      # old version without https
      # - "8080:80"
    environment:
      - ENVIRONMENT=production
      # - NGINX_ENTRYPOINT_QUIET_LOGS=0 # to enable more verbose logging
    depends_on:
      - django
    networks:
      - transcendence_network
    command: ["nginx", "-g", "daemon off;"]

networks:
  transcendence_network:
    driver: bridge
